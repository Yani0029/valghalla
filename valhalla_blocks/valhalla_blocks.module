<?php
/**
 * Valhalla blocks module
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk> 
 *
 * This module is responsible for the overview/status blocks.
 *  - These blocks are fetched asynchronously. The 2 Drupal
 *    blocks just insert a placeholder to be filled out, and
 *    instansiate rendering of the markup.
 * As well as the change election and change party blocks.
 *  - These 2, do not rely on the frontpage, and can be used
 *    wherever.
 */

/**
 * hook_block_info implementation
 */
function valhalla_blocks_block_info() {
  return array(
    'party_status' => array(
      'info' => t('Parti status'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'party_constituency_status' => array(
      'info' => t('Valgkredsstatus'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'election_switcher' => array(
      'info' => t('Skift valg'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'party_switcher' => array(
      'info' => t('Skift parti'),
      'cache' => DRUPAL_NO_CACHE
    ),
  );
}

/**
 * implements hook_menu()
 */
function valhalla_blocks_menu(){
  $items['valhalla_blocks/ajax/view'] = array(
    'page callback' => 'valhalla_block_ajax_view',
    'access callback' => 'user_is_logged_in'
  );

  return $items;
}

/**
 * implements hook_init()
 */
function valhalla_blocks_init(){
  // JS for fetching block contents with AJAX.
  drupal_add_js(drupal_get_path('module', 'valhalla_blocks') . '/js/valhalla_blocks.js', 'file');
}

/**
 * hook_block_view implementation
 */
function valhalla_blocks_block_view($delta = '') {
  switch($delta){
    // Change party
    case 'party_switcher':
      $parties_vocab = taxonomy_vocabulary_machine_name_load('partier');
      $parties = taxonomy_term_load_multiple(array(), array('vid' => $parties_vocab->vid));

      $markup = '';

      if (user_access('administer valhalla')) {
        $markup = 'Parti: ';
        foreach ($parties as $party_tid => $party_taxonomy){
          $markup .= '<a href="/valhalla/change/party/' . $party_tid .'">' . $party_taxonomy->name . '</a>, ';
        }
        $markup .= '<a href="/valhalla/change/party/0">' . 'Alle' . '</a>';
      }

      return array("content" => $markup);
      break;

    // Election switcher is just a normal block with a form.
    case 'election_switcher':
      $election_form = drupal_get_form('valhalla_change_election_form');
      return array("content" => drupal_render($election_form));
      break;

    // The other blocks are fetched with AJAX. this is just simple markup to
    // fill.
    default:
      return array("content" => '<div class="loading-gif" id="valhalla_block-' . $delta . '" ></div><script>valhalla_blocks.loadOverview("' . $delta . '");</script>');
      break;
    }
}

/**
 * Election switcher form
 *
 * Let the user change what election to watch.
 */
function valhalla_change_election_form(){
  $elections = node_load_multiple(array(), array('type' => 'election'));
  
  $election_options[0] = t('- Vælg -');

  foreach ($elections as $node) {
    $election_options[$node->nid] = $node->title;
  }

  $default_value = 0;

  if(isset($_SESSION['election_nid'])){
    $default_value = $_SESSION['election_nid'];
  }

  $form['election'] = array(
    '#type' => 'select',
    '#title' => t('Valg:'),
    '#options' => $election_options,
    '#default_value' => $default_value,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Vælg'),
  );

  return $form;
}

/**
 * Election switcher form submit
 *
 * Set election nid in $_SESSION. That is all.
 */
function valhalla_change_election_form_submit(&$form, $form_state){
  $_SESSION['election_nid'] = $form_state['values']['election'];
}


/**
 * AJAX block view
 *
 * Renders markup for the AJAX'ed blocks.
 */
function valhalla_block_ajax_view($delta = '') {
  $markup = '';
  global $user;

  $user_entity = user_load($user->uid);
  $user_party_id = empty($user_entity->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user_entity->field_party[LANGUAGE_NONE][0]['tid'];
  
  // Get polling stations user is allowed to see
  $restrict_polling_stations = array();
  if (!empty ($user_entity->field_polling_station[LANGUAGE_NONE])) {
    foreach ($user_entity->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  // Users selected election is in $_SESSION['election_nid'].
  $election_node = node_load($_SESSION['election_nid']);

  if (!is_object($election_node)) {
    print 'Der er ikke valgt noget valg';
    return;
  }

  // We need to know what polling stations are active in this
  // election.
  $polling_stations_field = field_get_items('node', $election_node, 'field_polling_stations');

  foreach ($polling_stations_field as $data) {
    $polling_station_nids[$data['target_id']] = $data['target_id'];
  }

  if (empty($polling_station_nids)) {
    print 'Der er ingen valsteder på dette valg' ;
    return;
  }

  // We also need the roles.
  $roles = _valhalla_helper_get_roles();

  switch ($delta) {
    //
    // Party status (Overall)
    //
    case 'party_status':
      $count = _valhalla_blocks_get_count($_SESSION['election_nid'],
                                          $polling_station_nids,
                                          $roles,
                                          $user_party_id);
      $markup = _valhalla_blocks_generate_overview_markup($count);

      break;
    //
    // Polling station status
    //
    case 'party_constituency_status':
      $constituency_nids = array();

      // We need info on the polling station nodes (constituency)
      // So we just load them all.
      foreach (node_load_multiple($polling_station_nids) as $polling_station) { 
        // If the array of restricting stations is not empty we only let the user see the
        // polling stations in this array
        if(!empty($restrict_polling_stations) && 
           !in_array($polling_station->nid, $restrict_polling_stations)) {
          continue;
        }

        $polling_station_nid = $polling_station->nid;

        $constituency_field = field_get_items('node', $polling_station, 'field_constituency');
        $constituency_nids[$constituency_field[0]['nid']][$polling_station_nid] = $polling_station_nid;

        $polling_station_count[$polling_station_nid] = _valhalla_blocks_get_count(
                                                                          $_SESSION['election_nid'],
                                                                          array($polling_station_nid),
                                                                          $roles,
                                                                          $user_party_id);
      }
      $markup = _valhalla_blocks_generate_constituency_markup($constituency_nids, $polling_station_count);

      break;
  }
  print $markup;
}

/**
 * Get count for roles and total
 * @params
 *  $eleciton_nid
 *  $polling_station_nids
 *  $roles
 *  $user_party_id
 */
function _valhalla_blocks_get_count($election_nid, $polling_station_nids, $roles, $user_party_id = NULL){
  $total_count = array(
      'assigned' => 0, 
      'total' => 0, 
      'rsvp_ok' => 0, 
      'rsvp_no' => 0, 
    );

  foreach ($roles as $role_nid => $role_title) {
    //
    // Total assinged roles
    //
    // This next bit is taken from the old method.
    // I dont understand it quite as much as i would like.
    $query = db_select('field_data_field_role_n'.$role_nid, 'vr');
    $query->innerJoin('field_data_field_party_list', 'vp', 'vp.entity_id=vr.entity_id ' );
    $query->innerJoin('field_data_field_volunteers_pr_party_1', 'vpp', 'vpp.field_volunteers_pr_party_1_value=vr.entity_id' );
    $query->addExpression('SUM(vr.field_role_n'.$role_nid.'_number_vo)');
    if ($user_party_id) {
      $query->condition('vp.field_party_list_party_list', $user_party_id);
    }
    $query->condition('vpp.entity_id', $polling_station_nids, 'IN');
    $res = $query->execute()->fetchColumn();

    $role_count[$role_nid]['assigned'] = is_numeric($res) ? $res : 0;
    $total_count['assigned'] += $role_count[$role_nid]['assigned'];

    //
    // Total assigned for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid);

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }
  
    $result = array_shift($volunteer_query->execute());

    $role_count[$role_nid]['total'] = count($result);
    $total_count['total'] += $role_count[$role_nid]['total'];

    //
    // Total replied ok for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 1 corresponds to ok
      ->fieldCondition('field_rsvp', 'value', 1);

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $result = array_shift($volunteer_query->execute());

    $role_count[$role_nid]['rsvp_ok'] = count($result);
    $total_count['rsvp_ok'] += $role_count[$role_nid]['rsvp_ok'];

    //
    // Total replied no for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 2,3 is no
      ->fieldCondition('field_rsvp', 'value', array(2, 3));

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $result = array_shift($volunteer_query->execute());
    
    $role_count[$role_nid]['rsvp_no'] = count($result);
    $total_count['rsvp_no'] += $role_count[$role_nid]['rsvp_no'];
  }

  return $count = array('total_count' => $total_count, 'role_count' => $role_count);
}

/**
 * Generate overview markup
 */
function _valhalla_blocks_generate_overview_markup($count){
  $markup = '
        <table>
          <tr>
            <td></td>
            <td></td>
            <td>Mangler</td>
          </tr>
          <tr>
            <td><div class="partistatusenhed">Status total</div></td>
            <td><div class="partistatusenhedvaerdi">' . $count['total_count']['total'] . '/' . $count['total_count']['assigned'] . '</div> </td>
            <td> <div class="partistatusenhedvaerdi">' . ($count['total_count']['assigned'] - $count['total_count']['total']) . '</div> </td>
          </tr>
          <tr>
            <td>Bekræftede</td>
            <td><div class="partistatusenhedvaerdi">' . $count['total_count']['rsvp_ok']. '</div> </td>
            <td></td>
          </tr>
          <tr>
            <td>Afviste</td>
            <td><div class="partistatusenhedvaerdi">' . $count['total_count']['rsvp_no']. '</div> </td>
            <td></td>
          </tr>
          <tr>
            <td>Afventer svar</td>
            <td><div class="partistatusenhedvaerdi">' .( $count['total_count']['total'] - ($count['total_count']['rsvp_ok'] + $count['total_count']['rsvp_no'] )). '</div> </td>
            <td></td>
          </tr>

        </table>';

  $markup .= '<table>
              <tr>
                <td></td>
                <td></td>
                <td>Mangler</td>
              </tr>';

  $roles = _valhalla_helper_get_roles();

  foreach ($count['role_count'] as $role_nid => $role_count) {
    $no = '';
    if($role_count['rsvp_no']) {
      $no = 'volunteer-status-cancelled';
    }
    $markup .= '
        <tr>
          <td><div class="partistatusenhed">'. $roles[$role_nid].'</div></td>
          <td><div class="partistatusenhedvaerdi '. $no .'">'. $role_count['total']
          . '/' . $role_count['assigned'] . '</div> </td>
          <td><div class="partistatusenhedvaerdi">' . 
          ($role_count['assigned'] - $role_count['total']) . '</div> </td>
        </tr>';
  }
  
  $markup .= '</table>';

  return $markup;
}

/**
 * Generates table markup for constituency
 */
function _valhalla_blocks_generate_constituency_markup($constituency_nids, $polling_station_count){
  $roles = _valhalla_helper_get_roles();

  foreach ($constituency_nids as $constituency_nid => $polling_station_nids) {
    $constituency_node = node_load($constituency_nid);

    $markup = '<table><thead><tr><th>' . $constituency_node->title . '</th>';
    foreach ($roles as $role_nid => $role_title) {
      $markup .= '<th>' . $role_title . '</th>';
    }

    $markup .= '<th>I alt</th>';
    $markup .= '</tr></thead>'; 
    $markup .= _valhalla_blocks_generate_polling_station_markup($polling_station_nids,
                                                                $polling_station_count);
   
    // Count constituency totals
    foreach ($polling_station_count as $data) {
      $constituency_total['total_count']['assigned'] += $data['total_count']['assigned'];
      $constituency_total['total_count']['total'] += $data['total_count']['total'];

      foreach ($data['role_count'] as $role_nid =>  $role_count) {
        $constituency_total['role_count'][$role_nid]['assigned'] += $role_count['assigned'];
        $constituency_total['role_count'][$role_nid]['total'] += $role_count['total'];
      }
    }

    $markup .= '<tr><td class="total">I alt</td>';

    // Generate bottom totals row
    foreach ($roles as $role_nid => $role_title) {
      $markup .= '<td class="total">' . $constituency_total['role_count'][$role_nid]['total'];
      $markup .= '/' . $constituency_total['role_count'][$role_nid]['assigned'] . '</td>';
    }

    $markup .= '<td class="total">' . $constituency_total['total_count']['total'];
    $markup .= '/' . $constituency_total['total_count']['assigned'] . '</td>';

    $markup .= '</tr>';

    $markup .= '</table>';
  }

  return $markup;
}

/**
 * Generates row markup for overview page
 */
function _valhalla_blocks_generate_polling_station_markup($polling_station_nids, $polling_station_count){
  $markup = '';

  foreach ($polling_station_nids as $polling_station_nid) {
    $polling_station_node = node_load($polling_station_nid);

    $markup .= '<tr><td><a href="/volunteers/station/' . $polling_station_nid .'">';
    $markup .= $polling_station_node->title . '</a></td>';

    foreach ($polling_station_count[$polling_station_nid]['role_count'] as $role_nid => $role_count) {
      $markup .= '<td>'  .    $role_count['total'] . '/'. $role_count['assigned'] . '</td>';
    }
    $markup .= '<td>'  .  $polling_station_count[$polling_station_nid]['total_count']['total'];
    $markup .= '/'. $polling_station_count[$polling_station_nid]['total_count']['assigned'] . '</td>';

    $markup .= '</tr>';
  }
  return $markup;
}
